name: Release

on:
  push:
    tags:
      - 'v*'  # Triggers on version tags like v1.0.0, v2.1.3, etc.
    branches:
      - 'ielashi/release-process'  # TEMPORARY: For testing only
  workflow_dispatch:
    inputs:
      version:
        description: 'Test version (e.g., 0.0.1-test)'
        required: true
        default: '0.0.1-test'
      create_release:
        description: 'Create actual GitHub release'
        required: true
        default: false
        type: boolean

env:
  RUST_VERSION: 1.88.0
  DFX_VERSION: 0.28.0

jobs:
  build-and-release:
    runs-on: ubuntu-24.04
    permissions:
      contents: write  # Required for creating releases
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
            ~/.dfx
          key: ${{ runner.os }}-release-${{ hashFiles('**/Cargo.lock') }}-${{ env.DFX_VERSION }}

      - name: Install Rust
        run: |
          rustup update $RUST_VERSION --no-self-update
          rustup default $RUST_VERSION
          rustup target add wasm32-unknown-unknown

      - name: Install DFX
        run: |
          wget https://github.com/dfinity/sdk/releases/download/$DFX_VERSION/dfx-$DFX_VERSION-x86_64-linux.tar.gz
          tar -xzf dfx-$DFX_VERSION-x86_64-linux.tar.gz
          sudo mv dfx /usr/local/bin/dfx
          dfx --version

      - name: Install tools via mise
        uses: jdx/mise-action@v2
        with:
          cache: true

      - name: Build backend canister
        run: |
          # Build backend canister (same WASM works for both ICP and ICRC1)
          just build testicp-backend

      - name: Build frontend canisters
        run: |
          # Build frontend canisters
          just build testicp-frontend
          just build ticrc1-frontend

      - name: Create release artifacts directory
        run: mkdir -p release-artifacts

      - name: Copy WASM files
        run: |
          # Copy backend WASM file (both backends use the same code)
          cp .dfx/local/canisters/testicp-backend/testicp-backend.wasm release-artifacts/ledger-faucet-backend.wasm

      - name: Package frontend assets
        run: |
          # Package frontend build output
          if [ -d "src/frontend/dist/icp" ]; then
            tar -czf release-artifacts/testicp-frontend-assets.tar.gz -C src/frontend/dist icp
            echo "✅ Packaged testicp-frontend assets"
          else
            echo "❌ testicp-frontend dist directory not found"
            ls -la src/frontend/dist/ || echo "dist directory doesn't exist"
          fi
          
          if [ -d "src/frontend/dist/icrc1" ]; then
            tar -czf release-artifacts/ticrc1-frontend-assets.tar.gz -C src/frontend/dist icrc1
            echo "✅ Packaged ticrc1-frontend assets"
          else
            echo "❌ ticrc1-frontend dist directory not found"
            ls -la src/frontend/dist/ || echo "dist directory doesn't exist"
          fi

      - name: Extract version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "VERSION=v${{ inputs.version }}" >> $GITHUB_OUTPUT
            echo "IS_MANUAL=true" >> $GITHUB_OUTPUT
          elif [ "${{ github.ref_type }}" = "tag" ]; then
            echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
            echo "IS_MANUAL=false" >> $GITHUB_OUTPUT
          else
            # Branch push - use beta version for realistic testing
            echo "VERSION=v1.0.0-beta.1" >> $GITHUB_OUTPUT
            echo "IS_MANUAL=false" >> $GITHUB_OUTPUT
          fi

      - name: Upload artifacts for testing
        if: ${{ github.event_name == 'workflow_dispatch' && inputs.create_release == false }}
        uses: actions/upload-artifact@v4
        with:
          name: release-artifacts-test-${{ github.run_number }}
          path: release-artifacts/
          retention-days: 7

      - name: Create test prerelease
        if: ${{ github.ref_type == 'branch' }}
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.VERSION }}
          name: "Release ${{ steps.version.outputs.VERSION }}"
          draft: false
          prerelease: true
          generate_release_notes: true
          files: |
            release-artifacts/*
          body: |
            ## Token Faucet Release ${{ steps.version.outputs.VERSION }}
            
            This release contains the following artifacts:
            
            ### Backend Canister (WASM file)
            - `ledger-faucet-backend.wasm` - Faucet backend canister (works for both ICP and ICRC1)
            
            ### Frontend Assets
            - `testicp-frontend-assets.tar.gz` - TESTICP frontend assets
            - `ticrc1-frontend-assets.tar.gz` - TICRC1 frontend assets
            
            ---
            
            **🧪 Note: This is a test release created from branch `${{ github.ref_name }}` and will be deleted after testing.**

      - name: Create release
        if: ${{ github.ref_type == 'tag' || inputs.create_release == true }}
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.VERSION }}
          name: Release ${{ steps.version.outputs.VERSION }}
          draft: false
          prerelease: ${{ contains(steps.version.outputs.VERSION, '-') }}
          generate_release_notes: true
          files: |
            release-artifacts/*
          body: |
            This release contains the following artifacts:
            
            ### Backend Canister (WASM file)
            - `ledger-faucet-backend.wasm` - Faucet backend canister (works for both ICP and ICRC1)
            
            ### Frontend Assets
            - `testicp-frontend-assets.tar.gz` - TESTICP frontend assets
            - `ticrc1-frontend-assets.tar.gz` - TICRC1 frontend assets
            
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
