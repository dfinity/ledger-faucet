name: CI

env:
  RUST_VERSION: 1.88.0
  DFX_VERSION: 0.28.0

on:
  push:
    branches:
      - main
  pull_request:

jobs:

  cargo-build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-24.04, macos-15 ]

    steps:
      - uses: actions/checkout@v4
      - uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-1

      - name: Install Rust
        run: |
          rustup update $RUST_VERSION --no-self-update
          rustup default $RUST_VERSION
          rustup target add wasm32-unknown-unknown

      - name: Build
        run: cargo build --release --all-targets
        env:
          RUST_BACKTRACE: 1

  cargo-clippy:
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4
      - uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-1

      - name: Install Rust + Clippy
        run: |
          rustup update $RUST_VERSION --no-self-update
          rustup default $RUST_VERSION
          rustup target add wasm32-unknown-unknown
          rustup component add clippy

      - name: Run Clippy
        run: cargo clippy --all-targets -- -D warnings

  rustfmt:
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4
      - uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-1

      - name: Install Rust + Rustfmt
        run: |
          rustup update $RUST_VERSION --no-self-update
          rustup default $RUST_VERSION
          rustup component add rustfmt

      - name: Check formatting
        run: cargo fmt --all -- --check

  shell-checks:
    name: ShellCheck
    runs-on: ubuntu-24.04
    steps:
    - uses: actions/checkout@v4
    - name: Run ShellCheck
      uses: ludeeus/action-shellcheck@2.0.0
      env:
        SHELLCHECK_OPTS: -e SC1090 -e SC2119 -e SC1091

  backend-tests:
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4
      - uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-1

      - name: Install Rust
        run: |
          rustup update $RUST_VERSION --no-self-update
          rustup default $RUST_VERSION
          rustup target add wasm32-unknown-unknown

      - name: Install DFX
        run: |
          wget https://github.com/dfinity/sdk/releases/download/$DFX_VERSION/dfx-$DFX_VERSION-x86_64-linux.tar.gz
          tar -xzf dfx-$DFX_VERSION-x86_64-linux.tar.gz
          sudo mv dfx /usr/local/bin/dfx
          dfx --version

      - name: Install Just
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://just.systems/install.sh | bash -s -- --to /usr/local/bin
          just --version

      - name: Run integration tests
        run: just test

  frontend-tests:
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4
      - uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-1

      - name: Install Rust
        run: |
          rustup update $RUST_VERSION --no-self-update
          rustup default $RUST_VERSION
          rustup target add wasm32-unknown-unknown

      - name: Install DFX
        run: |
          wget https://github.com/dfinity/sdk/releases/download/$DFX_VERSION/dfx-$DFX_VERSION-x86_64-linux.tar.gz
          tar -xzf dfx-$DFX_VERSION-x86_64-linux.tar.gz
          sudo mv dfx /usr/local/bin/dfx
          dfx --version

      - name: Install Just
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://just.systems/install.sh | bash -s -- --to /usr/local/bin
          just --version

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'tests/frontend/package.json'

      - name: Install Playwright dependencies
        run: |
          cd tests/frontend
          npm ci
          npx playwright install --with-deps

      - name: Run frontend tests
        run: just test-frontend-icp

  checks-pass:
    if: always()
    needs: [cargo-build, shell-checks, cargo-clippy, rustfmt, backend-tests, frontend-tests]
    runs-on: ubuntu-24.04
    steps:
      - name: Check all jobs passed
        if: ${{ contains(needs.*.result, 'failure') || contains(needs.*.result, 'cancelled') }}
        run: exit 1
